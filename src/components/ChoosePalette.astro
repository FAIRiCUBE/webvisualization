<!-----

This is a UI component that shows radio buttons for selecting a palette.

The palette is stored in localStorage.

The component listens for the "newpalette" event and updates the palette.



--- -->


<div class="choosepalette">
    <label><input type="radio" name="palette" value="d3.interpolateViridis" checked />Viridis</label>
    <label><input type="radio" name="palette" value="d3.interpolateTurbo" />Turbo</label>
    <label><input type="radio" name="palette" value="d3.interpolateOrRd" />Reds</label>
    <label><input type="radio" name="palette" value="d3.interpolateGnBu" />Aqua</label>
    <label class="qgis"><input type="radio" name="palette" value="qgis" />QGIS</label>
    <label class="truecolor"><input type="radio" name="palette" value="rgb"/>True Color</label>
    <label class="invertpalette"><input type="checkbox" name="invertpalette"/>Invert</label>
</div>






<script>

/* 
  Initialize the UI using the palette stored in localStorage.
  On page load, if localStorage.palette is set check the radio button
*/
document.addEventListener('DOMContentLoaded', () => {
  
  // Get the palette from localStorage
  const palette = localStorage.getItem('palette');
  if (!palette) return;

  // Check the radio button
  const radio = document.querySelector(`input[name="palette"][value="${palette}"]`);
  if (radio) (radio as HTMLInputElement).checked = true;

  // If localStorage.invertpalette is set, initialize the "Invert" checkbox to checked
  const invertCheckbox = document.querySelector('input[name="invertpalette"]') as HTMLInputElement;
  if (invertCheckbox) invertCheckbox.checked = localStorage.getItem('invertpalette')==='true';

});


/*
  Click handler for the invert checkbox.
  Checking the radio sets/unsets the invert flag in localStorage.
*/
document.querySelector('input[name="invertpalette"]')?.addEventListener('change', (e) => {
  localStorage.setItem('invertpalette', (e.target as HTMLInputElement).checked.toString());
  document.dispatchEvent(new Event('newpalette'));
});


/*
  Event listener for the "newpalette" event.
  This updates the UI to ensure the displayed state matches the palette in localStorage.

  If localStorage.palette=rgb hide the "Invert" checkbox.
  Palette=rgb means the image is a true color image, and it does not make sense to invert the data range when colorizing it.

*/
document.addEventListener('newpalette', () => {
  const palette = localStorage.getItem('palette');
  const invertCheckbox = document.querySelector('label.invertpalette') as HTMLLabelElement;
  invertCheckbox.style.opacity = (palette==='rgb'||palette==='qgis') ? '0' : '1';

  const qg = localStorage.getItem('QGISColorfile') || '';
  const qgisLabel = document.querySelector('label.qgis') as HTMLLabelElement;
  if (qg.length>0) qgisLabel.style.opacity = '1';
  else qgisLabel.style.opacity = '0';

  // Ensure the correct radio button is checked
  const paletteRadio = document.querySelector(`input[name="palette"][value="${palette}"]`) as HTMLInputElement;
  if (paletteRadio) paletteRadio.checked = true;
});




// Add an event listener for the "newbandcount" event. Show the True Color option if bandcount>1
document.addEventListener('newbandcount', () => {
  const bandcount = localStorage.getItem('bandcount') ?? '1';
  const rgbLabel = document.querySelector('.choosepalette .truecolor') as HTMLLabelElement;
  if (rgbLabel) rgbLabel.style.display = parseInt(bandcount) >= 3 ? 'initial' : 'none';
});


/*
  Click handler for the palette radio buttons
  When the palette is changed, set the palette in localStorage and trigger a "newpalette" event.
*/
document.querySelectorAll('input[name="palette"]').forEach( (radio : Element) => {
    // Trigger a "palette" event when the palette is changed
    (radio as HTMLInputElement).onchange = (e) => {
      console.log('ChoosePalette: Palette changed to', (e.target as HTMLInputElement).value);
      localStorage.setItem('palette', (e.target as HTMLInputElement).value);
      document.dispatchEvent(new Event('newpalette'));
    };
});



/*
  Listen for the "newsource" event.
  This event triggers when we start viewing a new layer.
  If localStorage.url ends with .tiff, then make the True Color option visible.
*/
document.addEventListener('newsource', () => {
  const url = localStorage.getItem('url');
  const isTiff = url && url.endsWith('.tif');
  const rgbLabel = document.querySelector('label[value="RGB"]') as HTMLLabelElement;
  if (rgbLabel) rgbLabel.style.display = isTiff ? 'initial' : 'none';
});




</script>




<style>
.choosepalette {
    display: flex;
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
    gap: 1rem;
    margin: 0 auto;
    /* Nah, looks bad. Neat effect but lots of pixelation and loss of antialiasing:
    color: white;
    mix-blend-mode: difference;
    */


    input{
      display: none;
    }
    input[name="invertpalette"] {
      display: initial;
      margin-right: 0.5rem;
    }
    label {
      cursor: pointer;
      transition: all 0.1s ease-in-out;
    }
    label:has(input:disabled) {
      opacity: 0.25;
      pointer-events: none;
    }
    label:has(input[name="palette"]:checked){
      color: var(--color-primary);
      font-weight: 600;
      margin-left: 0.2rem;
      margin-right: 0.2rem;
    }

}
</style>